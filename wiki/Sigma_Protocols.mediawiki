Those are key to understanding [[Private_Contract_Signatures|Private Contract Signatures]].

== In general ==

Sigma protocols involve a verifier (A) and prover (B).
They suppose that Alice and Bob share a public input <math>v</math> and agree on an efficiently testable relation <math>R</math>, and that Bob pretends to have a private input <math>w</math>:
* such that <math>(v,w)\in R</math>;
* which he does does not want to disclose.
Through the protocol, Bob will seek to convince Alice.

The protocol has three rounds:
:<math> B\rightarrow A: a=a(v,R,w) </math>
:<math> A\rightarrow B: c=c(v,R,a) </math>
:<math> B\rightarrow A: r=r(v,R,w,a,c,w) </math>
Lastly, Alice checks that Bob response <math>r</math> to her challenge <math>r</math> is valid. This explains what the last two rounds are for. The first round is there out of technical necessity: Bob chooses this <math>a</math> as a mask for passing the challenge without disclosing <math>w</math>.

== Examples ==

Here are examples of Sigma protocols based on the hardness of Discrete Logarithms. Fix <math>p</math> a prime and <math>g</math> an integer. The powers of <math>g</math> form a subgroup <math>G</math> inside the group <math>Z_p</math>, which is that of integers modulo <math>p</math>. The choice of these <math>p</math> and <math>g</math> is important so that they meet the [http://en.wikipedia.org/wiki/Decisional_Diffie%E2%80%93Hellman_assumption Decisional Diffie-Hellman] assumption; but there are standard techniques for doing that. 


'''Ex. 1: Schnorr identification protocol'''

Fix <math>g</math> an integer.
* Public input <math>v=\textrm{Pub}^B</math>.
* Agreed relation <math>(v,w)\in R \Leftrightarrow g^w=v </math>.
* Private input <math>w=\textrm{Priv}_B</math>.
* Bob will need some random ephemeral <math>s\in Z_p</math>.
* Alice will need some random <math>c\in Z_p</math>. 
The protocol has three rounds:
:<math> B\rightarrow A: a=g^s </math>
:<math> A\rightarrow B: c </math>
:<math> B\rightarrow A: r=wc+s </math>
Alice validates Bob's response by checking that <math>g^r=v^ca</math>. Indeed, if Bob was honest it should be that
:<math>g^r={g^w}^c g^s=v^ca</math>
'''Denote by <math>(a,c)\mapsto\textrm{Schnorr}_B(a,c)</math> the response of this protocol, done by prover B with mask a and under challenge c.'''


'''Ex. 2: Diffie-Hellman pairs'''

Fix <math>g</math> and <math>h</math> integers. The powers of <math>h</math> form a subgroup <math>H</math> inside the group <math>Z_p</math>. 
* Public input <math>u\in G,v\in H</math>.
* Agreed relation <math>((u,v),w)\in R \Leftrightarrow g^w=u \wedge h^w=v  </math>.
* Private input <math>w</math>.
* Bob will need some random <math>s\in Z_p</math>.
* Alice will need some random <math>c\in Z_p</math>. 
The protocol has three rounds:
:<math> B\rightarrow A: a=g^s, a'=g^{s'} </math>
:<math> A\rightarrow B: c,c' </math>
:<math> B\rightarrow A: r=wc+s, r'=wc'+s' </math>
Alice validates Bob's response by checking that <math>g^r=u^ca</math> and that <math>h^{r'}=v^{c'}a'</math>. Indeed, if Bob was honest it should be that
:<math>g^r={g^w}^c g^s=u^ca.</math>
and similarly for <math>h</math> with <math>v</math>.


'''Ex. 3: Proof of cyphertext content by encrypter'''

Fix <math>g</math> and  <math>h=g^x=\textrm{Pub}^T</math> integers.
* Public input <math>m</math> and <math>n=(u,v)</math>.
* Agreed relation <math>((m,n),w)\in R \Leftrightarrow u=g^w \wedge v={g^x}^w m  \Leftrightarrow n=\{m\}_{\textrm{Pub}^T}</math> under [[ElGamalSchnorr | ElGamal]] with ephemeral key <math>w</math>.
* Private input <math>w</math>.
* Bob will need some random <math>s\in Z_p</math>.
* Alice will need some random <math>c\in Z_p</math>. 
The protocol has three rounds:
:<math> B\rightarrow A: a=g^s, a={g^x}^{s} </math>
:<math> A\rightarrow B: c </math>
:<math> B\rightarrow A: r=wc+s, r=wc+s  </math>
Alice validates Bob's response by checking that <math>g^r=u^ca</math> and that <math>{g^x}^{r}=(v/m)^{c}a'</math>. Indeed, if Bob was honest it should be that 
:<math>g^r={g^w}^c g^s=u^ca.</math>
and similarly for <math>h=g^x</math> with <math>v'=v/m</math>.

'''Denote by <math>(a,c)\mapsto\textrm{CCE}^T(m,n)(a,c)</math> the response of this protocol, done towards T with mask a and under challenge c.'''


'''Ex. 4: Proof of cyphertext content by decrypter'''

Fix <math>g</math> and  <math>h=g^x=\textrm{Pub}^T</math> integers.
* Public input <math>m</math> and <math>n=(u,v)</math>.
* Agreed relation <math>((m,n),w)\in R \Leftrightarrow v=u^x m  \Leftrightarrow n=\{m\}_{\textrm{Pub}^T}</math> under [[ElGamalSchnorr | ElGamal]] for Trent.
* Private input <math>x=\textrm{Priv}_T</math>.
* Trent will need some random <math>s\in Z_p</math>.
* Alice will need some random <math>c\in Z_p</math>. 
The protocol has three rounds:
:<math> T\rightarrow A: a=g^s, a'=u^{s'} </math>
:<math> A\rightarrow T: c </math>
:<math> T\rightarrow A: r=xc+s  </math>
Alice validates Trent's response by checking that <math>g^r=h^c a</math> and that <math>u^r=(v/m)^{c} a'</math>. Indeed, if Bob was honest it should be that 
:<math>g^r={g^x}^c g^s=h^c a.</math>
and
:<math>u^r=u^{xc} u^s=(v/m)^c a'.</math>

'''Denote by <math>(a,c)\mapsto\textrm{CCD}^T(m,n)(a,c)</math> the response of this protocol, done towards with mask a and under challenge c.'''

== Composability ==

Consider <math>v_0, v_1</math> and <math>R_0, R_1</math>. Say Bob pretends to have <math>w_0, w_1</math> such that <math>(v_0,w_0)\in R_0 \wedge (v_1,w_1)\in R_1</math>, and does not want to disclose them. Is there a Sigma protocol for this new relation <math>R_0\wedge R_1=\{(v_0,v_1),(w_0,w_1)\,|\,(v_0,w_0)\in R_0 \wedge (v_1,w_1)\in R_1\}</math>? If there was some for <math>R_0</math> and <math>R_1</math>, then yes. It suffices to combine the parallel run of both protocols into one, as tuples. We cannot use twice the same mask a for security reasons, so although could use twice the same challenge c for both runs, we will assume that both a and c are in fact pairs.

'''Denote by <math>(a,c)\mapsto(P \wedge Q)(a,c) </math> the response to the and composition of P and Q, under the pair of masks a and the pair of challenges c.'''


Now, say Bob pretends to have one of <math>w_0</math> or <math>w_1</math>, and does not want to disclose it, not tell which one it is. Is there a Sigma protocol for this new relation <math>R_0\vee R_1=\{(v_0,v_1),(w_0,w_1)\,|\,(v_0,w_0)\in R_0 \vee (v_1,w_1)\in R_1\}</math>? If there was some for <math>R_0</math> and <math>R_1</math>, then sometimes yes. This sometimes is related to Bob's ability to simulate, on its own, a valid run of the component Sigma protocols. In other words, for instance say that Bob does not know <math>w_1</math>, but that he has the freedom to choose himself the corresponding challenge <math>c_1</math>. Is he able to efficiently generate <math>a_1,c_1,r_1</math> so that they are valid? If so, then yes. This particular property of the component Sigma protocols is referred to as "existence of a simulator" or "special honest-verifier zero-knowledge". Here is how.

* Public input <math>v_0,v_1</math>.
* Agreed relation <math>R_0\wedge R_1</math>.
* Private input <math>w_0</math>, say, but could equally be <math>w_1</math>.
* Bob will need some random <math>(u_0,a_0)\in R_0</math> and some run <math>a_1,c_1,r_1</math>. 
* Alice will need some random <math>c</math>. 
The protocol has three rounds:
:<math> B\rightarrow A: (a_0,a_1) </math>
:<math> A\rightarrow B: s </math>
:<math> B\rightarrow A: (c_0,c_1),(r_0,r_1) </math> where <math>r_0</math> is computed by Bob thanks to his knowledge of <math>w_0</math>.
Alice validates Bob response by checking that:
* <math>c=c_0\oplus c_1</math>
* <math>a_0,c_0,r_0</math> is valid
* <math>a_1,c_1,r_1</math> is valid


The intuition is that Bob has "divided up" the random challenge <math>s</math> into <math>c_0</math> which is random, and <math>c_1</math>, which is chosen. He has passed the challenge <math>c_0</math> thanks to his <math>w_0</math>. He has passed the challenge <math>c_1</math> because it was an easy challenge that he has himself chosen.

In the case of <math>\textrm{Schnorr}_B</math>, there exists a simulator, so that this can be done. Indeed, to generate <math>a_1,c_1,r_1</math> you:
* Pick <math>c_1,r_1</math>.
* Let  <math>a_1=g^{r_1}v_1^{-c_1}</math>.
Indeed, you then have <math>g^{r_1}=v_1^{c_1}a_1</math> so that the run is valid.

'''Denote by <math>(a,c)\mapsto(P \vee Q)(a,c) </math> the response to the or composition of two protocols P and Q, under the divided up mask a and challenge c.'''

== Non-interactive version ==

Instead of doing the Sigma protocol in three rounds, we could just do it in one round, by musing the Fiat-Shamir heuristics. The idea is that Bob challenges himself with something that he does not really control, namely <math>H(a,m)</math>, where <math>H</math> is a hash function like SHA2 and <math>m</math> is a public input, often just <math>v</math>. For instance, let us apply this procedure to the Schnorr identification protocol. We get:
 
* Public input <math>m=v\in G</math>.
* Agreed relation <math>(v,w)\in R \Leftrightarrow g^w=v </math>.
* Private input <math>w</math>.
* Bob will need some random <math>s\in Z_p</math>.
The modified protocol has only one true round, since B' is just B challenging himself:
:<math> B\rightarrow B': a=g^s </math>
:<math> B'\rightarrow B: c=H(a,m) </math>
:<math> B\rightarrow A: a,c,r=wc+s </math>
Alice validates Bob response by checking that <math>c=H(a,m)</math> and that <math>v^{-c}g^r=a</math>. Indeed, if Bob was honest it should be that
:<math>v^{-c}g^r=g^{-wc} g^{wc} g^s=a</math>.

'''In general, <math>(g^s,H(g^s,m),P(g^s,H(g^s,m)))</math> denotes the non-interactive version of P.'''

== Schnorr signatures ==

Let us further modify the above, and say that the challenge that Bob will put to himself is to be fabricated based upon some public <math>m</math> instead of <math>v</math>.
* Public input <math>m</math> a message and <math>v=\textrm{Pub}^B</math>.
* Agreed relation <math>(v,w)\in R \Leftrightarrow g^w=v </math>.
* Private input <math>w=\textrm{Priv}_B</math>.
* Bob will need some random ephemeral <math>s\in Z_p</math>.
:Bob computes <math>c=H(g^s,m)</math> and <math>r=s+wc</math>.
:Bob signs <math>m\in G</math> as <math>(c,r)</math>.
:Alice verifies <math>(c,r)</math> checking that <math>c=H(a, m)</math> with <math>a=v^{-c}g^r</math>.
:Indeed, if Bob was honest it should be that <math>v^{-c}g^r =g^{-wc}g^{wc+s} =g^s=a </math>.

Thus, a Schnorr signature of the message m is essence just the non-interactive version of the Schnorr identification protocol, i.e. 
:<math>(H(g^s,m),\textrm{Schnorr}_B(g^s,H(g^s,m)))</math>
with s random.