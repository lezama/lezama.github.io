Private Contract Signatures are a cryptography primitive which we need for the [[Secure Contract Signing Protocol]].

It was introduced in [http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.118.4142 Abuse-free optimistic contract signing] by Garay, Jakobsson, MacKenzie (1999). 

This page aims to give an outline of what they achieve, and how to implement them.

== Specifications ==

<math>\textrm{SPCS}^T_S(m)</math>  denotes a Private Contract Signatures by Pi in S on contract m with Trusted Third Party T. The object is such that:
* It can be created any of the Pi's in S and, in the eyes of an external party, faked by any other of the Pj's in S;
* The creating Pi, or T, are able to convert it into <math>\textrm{SIG}^T_{i}(m)</math>, and other Pj's can be convinced of this.

== Some Cryptography ==

The following must be understood first. In particular, the description of PCS we give uses the notations introduced there.

Outline of [[ElGamalSchnorr|ElGamal encryption]], which are encryption and signature schemes.

Outline of [[Sigma_Protocols|Sigma protocols]], which are composable, interactive zero-knowledge proof schemes.

== Simplified scheme ==


An <math>\textrm{SPCS}^T_S(m)</math> is
:<math>\textrm{NI}\left(\bigvee_{i\in S}\textrm{CCE}^T(H(m),(\textrm{Pub}^{P_i},v))\right)(g^s,H(g^s,m))
</math>
with s random. Intuitively:
* It constitutes a proof that <math>v=\{H(m)\}_{\textrm{Pub}^T}</math> under [[ElGamal]].
* In order to provide such a proof one needs to have the ephemeral key used.
* It also constitutes a proof that the ephemeral key was one of <math>\{\textrm{Priv}^{P_i}\}_{i\in S}</math>.
* Thus, whoever has done it, has admittedly signed m.
* But in order to which <math>P_i</math> has signed, one needs a proof of which of private keys was used. 


To unravel it, means to convert <math>\textrm{SPCS}^T_S(m)</math> into the final signature <math>\textrm{SIG}^T_{i\in S}(m)</math>:
:<math>\textrm{NI}\left(\textrm{CCE}^T(H(m),(\textrm{Pub}^{P_i},v))\vee\textrm{CCD}^T(H(m),(\textrm{Pub}^{P_i},v))\right)(g^{s'},H(g^{s'},m))
</math>
with s' random. Intuitively:
* In order to accomplish the conversion one needs to either have <math>\textrm{Priv}_{P_i}</math> used as ephemeral key, or to have <math>\textrm{Priv}_T</math>.
* It constitutes a proof that <math>v=\{H(m)\}_{\textrm{Pub}^T}</math> under [[ElGamal]] with ephemeral key <math>\textrm{Priv}_{P_i}</math>, which amounts to <math>P_i</math> signing m..
* No step discloses <math>\textrm{Priv}_{P_i}</math>.

== Standard scheme ==

Normally, a <math>\textrm{PCS}_B^A(m)</math> is
:<math>\textrm{NI}\left((\textrm{CCE}^T(0,n)\wedge\textrm{Schnorr}_B)\vee(\textrm{CCE}^T(1,n)\wedge\textrm{Schnorr}_A)\right)(g^s,H(g^s,m))</math>
with s random.

== To do ==

There might be a pb with g having to be the same in Trent's and the Party's for the simplified scheme to work.

Check duplication of a and c in and and or constructs.

Check whether non-interactive CCE under ephemeral key PubB and challenge m is an established way of signing.

Give simulators for CCE and CCT.