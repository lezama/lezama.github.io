Private Contract Signatures are a cryptography primitive which we need for the [[Secure Contract Signing Protocol]].

It was introduced in [http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.118.4142 Abuse-free optimistic contract signing] by Garay, Jakobsson, MacKenzie (1999). 

This page aims to give an outline of what they achieve, and how to implement them.

== Specifications ==

<math>\textrm{SPCS}^T_S(m)</math>  denotes a Private Contract Signatures by Pi in S on contract m with Trusted Third Party T. The object is such that:
* It can be created any of the Pi's in S and, in the eyes of an external party, faked by any other of the Pj's in S;
* The creating Pi, or T, are able to convert it into <math>\textrm{SIG}^T_{i}(m)</math>, and other Pj's can be convinced of this.

== Some Cryptography ==

The following must be understood first. In particular, the description of PCS we give uses the notations introduced there.

Outline of [[ElGamalSchnorr|ElGamal encryption]], which are encryption and signature schemes.

Outline of [[Sigma_Protocols|Sigma protocols]], which are composable, interactive zero-knowledge proof schemes.


== Standard scheme ==

A <math>\textrm{PCS}_S(m)</math> is
:<math>\textrm{NI}\left( \bigvee_{i\in S} (\textrm{CCE}^T(i,n)\wedge\textrm{Schnorr}_i \right)(g^s,H(g^s,m))</math>
with s random.

== Simplified scheme (Failed attempt) ==

An <math>\textrm{SPCS}^T_S(m)</math> is
:<math>\textrm{NI}\left(\bigvee_{i\in S}\textrm{CCE}^T(H(m),(\textrm{Pub}^{P_i},v))\right)(g^s,H(g^s,m))
</math>
with s random. Intuitively:
* It constitutes a proof that <math>v=\{H(m)\}_{\textrm{Pub}^T}</math> under [[ElGamal]], with ephemeral key one of <math>\{\textrm{Priv}^{P_i}\}_{i\in S}</math>.
* In order to provide such a proof one needs to have the ephemeral key used.
* Thus, whoever has done it, has admittedly signed m.
* But in order to know which of the <math>P_i</math> has signed, one needs a proof of which of private keys was used. 


To unravel it, means to convert <math>\textrm{SPCS}^T_S(m)</math> into the final signature <math>\textrm{SIG}^T_{i\in S}(m)</math>:
:<math>\textrm{NI}\left(\textrm{CCE}^T(H(m),(\textrm{Pub}^{P_i},v))\vee\textrm{CCD}^T(H(m),(\textrm{Pub}^{P_i},v))\right)(g^{s'},H(g^{s'},m))
</math>
with s' random. Intuitively:
* In order to accomplish the conversion one needs to either have <math>\textrm{Priv}_{P_i}</math> used as ephemeral key, or to have <math>\textrm{Priv}_T</math>.
* It constitutes a proof that <math>v=\{H(m)\}_{\textrm{Pub}^T}</math> under [[ElGamal]] with ephemeral key <math>\textrm{Priv}_{P_i}</math>, which amounts to <math>P_i</math> signing m.
* No step discloses <math>\textrm{Priv}_{P_i}</math>.


This scheme is simpler than the original scheme. It has dangerous weaknesses, however:
* By requiring that <math>\textrm{Priv}_{P_i}</math> be the ephemeral key for ElGamal encryption, we are imposing that the pairs <math>(\textrm{Priv}_{P_i},\textrm{Pub}^{P_i})</math> and <math>(\textrm{Priv}_{T},\textrm{Pub}^{T})</math> are based on the same Diffie-Hellman group. Altogether, this would mean that all pairs get generates with respect to the same group. This is non-traditional, and perhaps it weakens security? Nevertheless, notice that precise, fixed groups have been recommended for use, for instance in [http://tools.ietf.org/html/rfc5114#page-4 RFC 5114].
* The same ephemeral key <math>\textrm{Priv}_{P_i}</math> is reused over and over, which means that the cyphertext is always <math>H(m)g^{\textrm{Priv}_{P_i}\textrm{Priv}_{T}}</math> but since <math>H(m)</math> is known, so is <math>g^{\textrm{Priv}_{P_i}\textrm{Priv}_{T}}</math>, and so the next time Pi is immediately identified as the creator of the SPCS.
* Worse even, Pi's signature, once it has been used once, can then be forged, since signing amounts to multiply by <math>g^{\textrm{Priv}_{P_i}\textrm{Priv}_{T}}</math> in this scheme.

== To do ==

Check duplication of a and c in and and or constructs.

Give simulators for CCE and CCT.