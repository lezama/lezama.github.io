
Provides abuse-free asynchronous multi-party optimistic contract signing.

It says that there are only two competitors doing just that:
* Garay and MacKenzie, whose security has been put at stake.
* [[BaumwaidnerWaidner]].

Let ''n'' be the number of parties. This protocol requires ''n(n-1)(n/2)+1'' messages. It relies on Private Contract Signature.

== Private Contract Signatures (PCS) ==

PCS_Pi(C,Pj,T) denotes a Private Contract Signatures by Pi for Pj on contract C with Trusted Third Party T. The object is such that:
* It can be created by Pi and, in the eyes of an external party, faked by Pj;
* Pi and T are able to convert it into {C}_PrivPi, and Pj can be convinced of this.

How different is that from the Designated Verifiable Escrows of [[AsokanSchunter]]? How secure are they? Here the further reference on PCS given is [[GarayJakobssonMackenzie]].

== Outline of the protocol ==

* Await from j < i: PCS_Pj((C,1),Pi,T). Else quit.
* Send to j > i: PCS_Pi((C,1),Pj,T) 
* Await from j > i: PCS_Pj((C,1),Pi,T). Else abort. 
* Send to j < i: PCS_Pi((C,1),Pj,T) 

For ''t=2...n/2'' do:
* Await from j < i: PCS_Pj((C,t),Pi,T). Else resolve.
* Send to j > i: PCS_Pi((C,t),Pj,T) 
* Await from j > i: PCS_Pj((C,t),Pi,T). Else resolve. 
* Send to j < i: PCS_Pi((C,t),Pj,T) 


* Await from j < i: PCS_Pj((C,n/2+1),Pi,T), {C}_PrivPj. Else resolve.
* Send to j > i: PCS_Pi((C,n/2+1),Pj,T), {C}_PrivPi 
* Await from j > i: PCS_Pj((C,n/2+1),Pi,T), {C}_PrivPj. Else resolve. 
* Send to j < i: PCS_Pi((C,n/2+1),Pj,T), {C}_PrivPi

''Abort'' is a subprotocol, where T intervenes, it aims at cancelling the entire protocol by asking T to longer accept to convert some PCS_Pi((C,t),Pj,T) into {C}_PrivPi. T will either send back a signed contract or agree to abort. However it may overturn its abort decision if it realizes that Pi is dishonest.

''Resolve'' is a subprotocol, where T intervenes, it aims at completing the protocol by asking T to convert some PCS_Pj((C,t),Pi,T) into {C}_PrivPj. If provided enough grounds for doing it, T will do so.

See [[AsokanSchunter]] for an intuition on abort/resolve.

Remarks:
* The cascading message structure is so that Parties are committed to certain stages, e.g. when P2 sends its PCS_P2((C,2),P3,T), it should mean that it has received PCS_P1((C,1),P2,T).
* This information allows the TTP to determine dishonest parties.
* Colluded dishonest players must not be able to propagate an abort decision.  The total number of rounds outnumbers the total number of abort requests that a coalition of ''n-1'' can perform.

Still, we need to build a more thorough intuition of why this works.

== Naive questions on this paper, so far ==

* ''Resiliency.'' The authors make the assumption that any message will, eventually, reach its goal. This does not seem a realistic assumption, but nor does it seem a crucial assumption. Clarify. 
* ''PCS.'' How secure are they?